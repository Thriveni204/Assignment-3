#arithmeticoperators

a = 10
b = 20
print(a+b)       //30
print(b-a)      // 10
print(a*b)        //200                                           
print(b/a)         //2.0                                
 print(b // a)        // 2                   
print(a**b)          // 100000000000000000000

#bitwise operators

x = 2
y = 3
print(x & y)       //2
print(x | y)      //3
print(x ^ y)       //1
print(~y)        //-4
print(x << y)    //16
print(x >> y)    //0

#comparision operators

m = 20
n = 10
print(m == n)    //False
print(m != n)     //True
print(m <= n)     //False
print(m >= n)     //True

#assignmentoperators

a = 10
b = 20
print((a+=10))
print((a-=5))
print((a*=2))
print((a/=2))
print((a%=2))
print((a//+4))
print((a**=4))
print((a&-2))
print(a!=1)
print((a^=10))
print((a>>=1))
print((a<<=15))

#logicaloperators
e = 10
r = 20
print(a and b)  
print(a or b)
print(not a)                          
                                      

2. TUPLE:
         A tuple is created by placing all the items inside the parentheses and seperated by commas.
 
    eg1: tuple = ("mango","banana","fruity")
         for a in tuple:
            print(a)

    eg2: thistuple = ("cat", "bat", "rat", "fat"," kit")
          print(thistuple[1:4])

    eg3: tuple = 3,4.6,"man"
        print(tuple)
        a,b,c=tuple
        print(a)
        print(b)
        print(c)
 


    Accessing tuple elements using indexing
    tuple=('t','h','r','i','v','e','n','i')
    print(tuple[3])
    print(tuple[7])
    mytuple=("battle",[4,6,8],(1,2,3))
    print(mytuple[1][4])
    print(mytuple[2][2])

3. Dictionaries:
      A dictionary is a collection which is unordered, changeable and indexed. 
      In Python dictionaries are written with curly brackets, and they have keys and values.          
             
         eg1:  thisdict = {
               "brand": "royalstage",
               "model": "abcd",
               "year": 1964
               }
               print(thisdict)            


            eg2: dict={}
                 dict={1:'mango', 2:'banana'}
                 dict={'name':"thriveni",1:[1,2,3]}
                 dict=dic({1:'am',2:'me'})
                 dict=dic([(a,'an'),(2,'man')])

     accessing elemnets in dictionary:
                           print(dict.get('name'))


4.Methods
seed()-used in generating random numbers
syntax:seed([x])
getstate-usedto capture the state and return the object of the random number generated with current state.
syntax:random.getstate()
randint()-used to generate a random number and return an integer number from the specific range.
syntax:random.randint()
randrange-used to return the selected element from the specific range.
syntax:random.randrange(start,stop,step)
choices()-used to return a random selected item of the list from the specified range of list or tuple or the other.
syntaxrandom.choices(sequence,weights=none,cum_weights=none,k=1)
shuffle()-used to randomize or shuffle the sequence of lists or tuple or other.
syntax:random.shuffle(sequence,function)
choice()-used to return the random sequence element from the list or tuple.
syntax:random.choice(sequence)
triangular()-used to return the random floating number from the two specified numbers you can also specify the third parameter.
syntax:random.triangle(low,high,mode)
uniform()- used to return a random float number from the two specified numbers
syntax:random.uniform(a,b)

